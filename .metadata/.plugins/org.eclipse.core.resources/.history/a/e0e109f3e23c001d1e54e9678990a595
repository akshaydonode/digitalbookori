package com.cts.digitalbook.digitalbookbookservice.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cts.digitalbook.digitalbookauthorservice.exceptions.DigitalBookException;
import com.cts.digitalbook.digitalbookbookservice.clients.AuthorServiceClient;
import com.cts.digitalbook.digitalbookbookservice.dtos.BookDetailsDTO;
import com.cts.digitalbook.digitalbookbookservice.dtos.BookSearchDTO;
import com.cts.digitalbook.digitalbookbookservice.entities.Author;
import com.cts.digitalbook.digitalbookbookservice.entities.BookEntity;
import com.cts.digitalbook.digitalbookbookservice.repositories.BookRepository;

@Service
public class BookServiceImpl implements BookService {

	@Autowired
	BookRepository bookRepository;

	@Autowired
	AuthorServiceClient authorServiceClient;

	@Autowired
	EntityDtoMapper mapper;

	@Override
	public BookEntity createBookByAuthor(int authorId, BookEntity bookEntity) throws DigitalBookException {

		Optional<Author> authorEntity = authorServiceClient.getAuthorByID(authorId);

		if (!authorEntity.isEmpty() && Objects.nonNull(bookEntity)) {
			if (!bookEntity.getTitle().isEmpty() && !bookEntity.getCategory().isEmpty()
					&& !bookEntity.getContents().isEmpty()) {
				Optional<BookEntity> bookEntityOpt = bookRepository.checkTitleExitOrNot(bookEntity.getTitle());

				if (bookEntityOpt.isEmpty()) {
					throw new DigitalBookException("Book already created with " + bookEntity.getTitle()
							+ " title. Please create with another title.");
				} else {
					return bookRepository.save(bookEntity);

				}
			} else {
				throw new DigitalBookException(
						"Please fill mandatory details like Book-Title, Book-Category and Book-Contens");
			}

		} else {
			throw new DigitalBookException("Author is not registered or valid....");
		}

	}

	@Override
	public BookEntity updateBookDetails(int authorId, int bookId, BookEntity bookEntity) throws DigitalBookException {

		Optional<BookEntity> bookDetails = bookRepository.getBookDetailsByBookIdAndAuthorId(authorId, bookId);

		if (!bookDetails.isEmpty()) {
			if (!bookDetails.get().getCategory().equals(bookEntity.getCategory())) {
				bookDetails.get().setCategory(bookEntity.getCategory());
			}

			if (!bookDetails.get().getContents().equals(bookEntity.getContents())) {
				bookDetails.get().setContents(bookEntity.getContents());
			}

			if (!bookDetails.get().getPublished().equals(bookEntity.getPublished())) {
				bookDetails.get().setPublished(bookEntity.getPublished());
			}

			if (!bookDetails.get().getPublisher().equals(bookEntity.getPublisher())) {
				bookDetails.get().setPublisher(bookEntity.getPublisher());
			}

			if (!bookDetails.get().getLogo().equals(bookEntity.getLogo())) {
				bookDetails.get().setLogo(bookEntity.getLogo());
			}
			if (bookDetails.get().getPrice() - bookEntity.getPrice() != 0) {
				bookDetails.get().setPrice(bookEntity.getPrice());
			}
			if (bookDetails.get().getActive() != bookEntity.getActive()) {
				bookDetails.get().setActive(bookEntity.getActive());
			}
			bookDetails.get().setUpdateDate(new Date());

			// need to write for code for active status of book for reader
			return bookRepository.save(bookDetails.get());

		} else {
			throw new DigitalBookException("Invalid Book ID and Author ID...");
		}

	}

	@Override
	public List<BookDetailsDTO> searchBook(BookSearchDTO bookSearchDTO) throws DigitalBookException {

		if (Objects.nonNull(bookSearchDTO)) {

			Optional<Author> authorEntity = authorServiceClient.getAuthorByName(bookSearchDTO.getAuthorName());

			List<BookEntity> bookEntities = bookRepository.searchBook(bookSearchDTO.getTitle(),
					authorEntity.get().getAuthorId(), bookSearchDTO.getCategory(), bookSearchDTO.getPrice(),
					bookSearchDTO.getPublisher());
			if (Objects.nonNull(bookEntities)) {
				List<BookDetailsDTO> bookDetailsDTOs = new ArrayList();

				for (BookEntity bookEntity2 : bookEntities) {
					BookDetailsDTO bookDetailsDTO = mapper.bookDetailsDTO(bookEntity2, authorEntity);
					bookDetailsDTOs.add(bookDetailsDTO);
				}

				return bookDetailsDTOs;
			} else {
				throw new DigitalBookException("Oops. Didn't found any book.");
			}

		} else {
			throw new DigitalBookException("Please enter atleast one parameter for search.");
		}

//		List<BookEntity> bookEntity = bookRepository.searchBook(
//				bookSearchDTO.getTitle().isEmpty() ? bookSearchDTO.getTitle() : null,
//				authorEntity.isEmpty() ? null : authorEntity.get().getAuthorId(),
//				bookSearchDTO.getCategory().isEmpty() ? bookSearchDTO.getCategory() : null,
//				bookSearchDTO.getPrice() != 0 ? bookSearchDTO.getPrice() : null,
//				bookSearchDTO.getPublisher().isEmpty() ? bookSearchDTO.getPublisher() : null);

	}

	@Override
	public List<BookDetailsDTO> getAllBooks() throws DigitalBookException {
		List<BookEntity> bookEntities = bookRepository.findAll();
		List<BookDetailsDTO> bookDetailsDTOs = new ArrayList();

		if (Objects.nonNull(bookEntities)) {

			for (BookEntity bookEntity2 : bookEntities) {
				BookDetailsDTO bookDetailsDTO = mapper.bookDetailsDTO(bookEntity2);
				bookDetailsDTOs.add(bookDetailsDTO);
			}

			return bookDetailsDTOs;
		} else {
			throw new DigitalBookException("Books not present in database");
		}

	}

}
